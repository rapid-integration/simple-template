name: template

services:
  backend:
    container_name: template-backend
    image: ${DOCKER_USERNAME}/${IMAGE_NAME}-backend:${TAG:-latest}
    restart: unless-stopped
    env_file:
      - path: .env
        required: true
    environment:
      - BACKEND_APP_DEBUG=false
    depends_on:
      - postgres
    networks:
      - template-network
    profiles:
      - prod

  backend-dev:
    container_name: template-backend-dev
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    env_file:
      - path: .env
        required: true
    ports:
      - 127.0.0.1:8000:8000
    environment:
      - BACKEND_APP_DEBUG=true
    depends_on:
      postgres:
        restart: false
        required: true
        condition: service_started
    volumes:
      - type: bind
        source: ./apps/backend/src
        target: /app/src
    networks:
      - template-network
    profiles:
      - dev
      - dev-backend

  backend-test:
    container_name: template-backend-test
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.test
    restart: no
    command: |
      pytest --cov=src --cov-report=term-missing tests
    env_file:
      - path: .env
        required: true
    environment:
      - BACKEND_APP_DEBUG=true
    depends_on:
      postgres-test:
        restart: false
        required: true
        condition: service_started
    networks:
      - template-network
    profiles:
      - test

  backend-test-e2e:
    container_name: template-backend-test-e2e
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.test
    restart: no
    command: |
      pytest --cov=src --cov-report=term-missing tests/e2e
    env_file:
      - path: .env
        required: true
    environment:
      - BACKEND_APP_DEBUG=true
    depends_on:
      postgres-test:
        restart: false
        required: true
        condition: service_started
    networks:
      - template-network
    profiles:
      - test-e2e

  backend-test-unit:
    container_name: template-backend-test-unit
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.test
    restart: no
    command: |
      pytest --cov=src --cov-report=term-missing tests/unit
    env_file:
      - path: .env
        required: true
    environment:
      - BACKEND_APP_DEBUG=true
    depends_on:
      postgres-test:
        restart: false
        required: true
        condition: service_started
    networks:
      - template-network
    profiles:
      - test-unit

  frontend:
    container_name: template-frontend
    image: ${DOCKER_USERNAME}/${IMAGE_NAME}-frontend:${TAG:-latest}
    restart: unless-stopped
    env_file:
      - path: .env
        required: true
    environment:
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - API_URL=http://backend:8000/api/
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      backend:
        restart: false
        required: true
        condition: service_started
    networks:
      - template-network
    profiles:
      - prod

  frontend-dev:
    container_name: template-frontend-dev
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    env_file:
      - path: .env
        required: true
    environment:
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - API_URL=http://backend-dev:8000/api/
      - NODE_ENV=development
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      backend-dev:
        restart: false
        required: true
        condition: service_started
    volumes:
      - type: bind
        source: ./apps/frontend/.next
        target: /app/.next
      - type: bind
        source: ./apps/frontend/pages
        target: /app/pages
      - type: bind
        source: ./apps/frontend/public
        target: /app/public
      - type: bind
        source: ./apps/frontend/src
        target: /app/src
      - type: bind
        source: ./apps/frontend/middleware.ts
        target: /app/middleware.ts
      - type: bind
        source: ./apps/frontend/next.config.ts
        target: /app/next.config.ts
    networks:
      - template-network
    profiles:
      - dev

  postgres:
    container_name: template-postgres
    image: postgres:17.5
    restart: unless-stopped
    env_file:
      - path: .env
        required: true
    ports:
      - 127.0.0.1:${BACKEND_POSTGRES_PORT}:${BACKEND_POSTGRES_PORT}
    environment:
      - PGUSER=${BACKEND_POSTGRES_USERNAME}
      - POSTGRES_DB=${BACKEND_POSTGRES_PATH}
      - POSTGRES_USER=${BACKEND_POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${BACKEND_POSTGRES_PASSWORD}
    volumes:
      - type: volume
        source: postgres-data
        target: /var/lib/postgresql/data
    networks:
      - template-network
    profiles:
      - dev
      - dev-backend
      - prod

  postgres-test:
    container_name: template-postgres-test
    image: postgres:17.5
    restart: unless-stopped
    env_file:
      - path: .env
        required: true
    ports:
      - 127.0.0.1:${BACKEND_POSTGRES_TEST_PORT}:${BACKEND_POSTGRES_TEST_PORT}
    environment:
      - PGUSER=${BACKEND_POSTGRES_TEST_USERNAME}
      - POSTGRES_DB=${BACKEND_POSTGRES_TEST_PATH}
      - POSTGRES_USER=${BACKEND_POSTGRES_TEST_USERNAME}
      - POSTGRES_PASSWORD=${BACKEND_POSTGRES_TEST_PASSWORD}
    volumes:
      - type: volume
        source: postgres-test-data
        target: /var/lib/postgresql/data
    networks:
      - template-network
    profiles:
      - test
      - test-e2e
      - test-unit

  node-exporter:
    container_name: template-node-exporter
    image: quay.io/prometheus/node-exporter:v1.9.1
    restart: unless-stopped
    env_file:
      - path: .env
        required: true
    volumes:
      - type: volume
        source: node-exporter-data
        target: /host
        read_only: true
        volume:
          nocopy: true
    networks:
      - template-network
    command:
      - --path.rootfs=/host
    profiles:
      - prod

  prometheus:
    container_name: template-prometheus
    image: prom/prometheus:v3.3.0
    restart: unless-stopped
    ports:
      - 127.0.0.1:9090:9090
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:9090/-/healthy"]
      interval: 1m30s
      timeout: 5s
      start_period: 5s
      start_interval: 2s
      retries: 5
    env_file:
      - path: .env
        required: true
    volumes:
      - type: bind
        source: ./etc/prometheus/alert.rules.yml
        target: /etc/prometheus/alert.rules.yml
    networks:
      - template-network
    configs:
      - source: prometheus-config
        target: /etc/prometheus/prometheus.yml
    profiles:
      - prod

  alertmanager:
    container_name: template-alertmanager
    build:
      context: ./etc/alertmanager
      dockerfile: Dockerfile
    restart: no
    env_file:
      - path: .env
        required: true
    networks:
      - template-network
    depends_on:
      backend:
        restart: false
        required: true
        condition: service_started
      prometheus:
        condition: service_healthy
    profiles:
      - prod

  grafana:
    container_name: template-grafana
    image: grafana/grafana:11.6.1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:3000/api/health"]
      interval: 1m30s
      timeout: 5s
      start_period: 5s
      start_interval: 2s
      retries: 5
    env_file:
      - path: .env
        required: true
    volumes:
      - type: bind
        source: ./etc/grafana/provisioning/dashboards
        target: /etc/grafana/provisioning/dashboards
      - type: bind
        source: ./etc/grafana/provisioning/datasources
        target: /etc/grafana/provisioning/datasources
      - type: volume
        source: grafana-data
        target: /var/lib/grafana
    networks:
      - template-network
    configs:
      - source: grafana-config
        target: /etc/grafana/grafana.ini
    depends_on:
      prometheus:
        restart: false
        required: true
        condition: service_healthy
    profiles:
      - prod

  nginx:
    container_name: template-nginx
    image: nginx:1.28.0-alpine
    restart: unless-stopped
    env_file:
      - path: .env
        required: true
    ports:
      - 443:443
      - 80:80
    networks:
      - template-network
    configs:
      - source: nginx-config
        target: /etc/nginx/conf.d/default.conf
    depends_on:
      backend:
        restart: false
        required: true
        condition: service_started
      grafana:
        restart: false
        required: true
        condition: service_healthy
    profiles:
      - prod

  nginx-dev:
    container_name: template-nginx-dev
    image: nginx:1.28.0-alpine
    restart: unless-stopped
    env_file:
      - path: .env
        required: true
    ports:
      - 443:443
      - 80:80
    networks:
      - template-network
    configs:
      - source: nginx-dev-config
        target: /etc/nginx/conf.d/default.conf
    depends_on:
      backend-dev:
        restart: false
        required: true
        condition: service_started
    profiles:
      - dev
  
  cloudpub-dev:
    container_name: template-cloudpub-dev
    image: cloudpub/cloudpub:latest
    restart: unless-stopped
    command: run
    env_file:
      - path: .env
        required: true
    volumes:
      - cloudpub-dev-data:/home/cloudpub
    networks:
      - template-network
    environment:
      - TOKEN=${CLOUDPUB_TOKEN}
      - HTTP=nginx-dev:80
    depends_on:
      nginx-dev:
        restart: false
        required: true
        condition: service_started
    profiles:
      - dev

volumes:
  node-exporter-data:
    name: template-node-exporter-data
  grafana-data:
    name: template-grafana-data
  postgres-data:
    name: template-postgres-data
  postgres-test-data:
    name: template-postgres-test-data
  cloudpub-dev-data:
    name: template-cloudpub-dev-data

networks:
  template-network:
    name: template-network
    driver: bridge

configs:
  prometheus-config:
    name: template-prometheus-config
    file: ./etc/prometheus/prometheus.yml
  grafana-config:
    name: template-grafana-config
    file: ./etc/grafana/grafana.ini
  nginx-config:
    name: template-nginx-config
    file: ./etc/nginx/conf.d/default.prod.conf
  nginx-dev-config:
    name: template-nginx-dev-config
    file: ./etc/nginx/conf.d/default.dev.conf
